# ----------------------------------------------------------------------
# Rust specific - prioritized
# ----------------------------------------------------------------------
# Rust build directory - exclude all compilation artifacts
/target/
/*/target/
**/target/

# Allow Cargo.lock for binary projects, exclude for libraries
# Uncomment the next line if this is a library
# Cargo.lock

# Keep essential Cargo files
!Cargo.toml

# Rust-specific generated files
**/*.rs.bk
**/incremental/
**/incremental-*/

# Rust profiling and analysis
perf.data
perf.data.old
callgrind.out.*
*.speedscope.json
flamegraph.svg

# ----------------------------------------------------------------------
# Python specific
# ----------------------------------------------------------------------
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
.pytest_cache/
.coverage
htmlcov/
.tox/
.nox/

# Distribution / packaging
*.egg-info/
.installed.cfg
*.egg
MANIFEST
pip-log.txt
pip-delete-this-directory.txt

# Virtual environments - keep only requirements.txt
env/
venv/
ENV/
.env/
.venv/
env.bak/
venv.bak/
.python-version
pyvenv.cfg
!requirements.txt

# Jupyter Notebook
.ipynb_checkpoints

# ----------------------------------------------------------------------
# C/C++ specific
# ----------------------------------------------------------------------
# Object files
*.o
*.ko
*.obj
*.elf
*.lo
*.slo

# Precompiled headers
*.gch
*.pch

# Libraries
*.lib
*.a
*.la
*.lai
*.lo
*.so
*.so.*
*.dylib
*.dll

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Executables
*.exe
*.out
*.app
*.i*86
*.x86_64
*.hex

# CMake
CMakeCache.txt
CMakeFiles/
cmake_install.cmake
cmake_uninstall.cmake
CTestTestfile.cmake
CMakeScripts/
compile_commands.json
_deps/
CMakeFiles/
# Keep CMakeLists.txt
!CMakeLists.txt
!*.cmake

# Build systems
# Makefiles - but keep the main one
Makefile.in
*.make
!Makefile
!*.mk
!*.pri
!*.pro

# Ninja
.ninja_deps
.ninja_log
build.ninja

# ----------------------------------------------------------------------
# Zig specific
# ----------------------------------------------------------------------
zig-cache/
zig-out/
release/
debug/
build-*/
build/
# Keep build.zig files
!build.zig
!build.zig.zon

# ----------------------------------------------------------------------
# Common build directories (language-agnostic)
# ----------------------------------------------------------------------
/build/
/builds/
/out/
/output/
/dist/
/bin/
/obj/
/lib/
/_build/
/build-*/
/cmake-build-*/
/Release/
/Debug/
/RelWithDebInfo/
/MinSizeRel/
/.build/
/.cache/
/artifacts/

# ----------------------------------------------------------------------
# IDE & Editor specific
# ----------------------------------------------------------------------
# Visual Studio Code
.vscode/
*.code-workspace
.history/

# JetBrains (IntelliJ/CLion/GoLand/PyCharm/etc)
.idea/
*.iml
*.ipr
*.iws
.idea_modules/
out/
cmake-build-*/

# Visual Studio
.vs/
*.suo
*.user
*.userosscache
*.sln.docstates
*.userprefs
*.VC.db
*.VC.opendb
*.psess
*.vsp
*.vspx
*.vcxproj.filters

# Xcode
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/
*.xccheckout
*.moved-aside
DerivedData/
*.xcuserstate
*.xcworkspace
!default.xcworkspace

# Eclipse
.settings/
.project
.cproject
.classpath
.buildpath

# Generic editor backups
*~
*.bak
*.swp
*.swo
.*.swp
.*.swo
\#*\#
.#*

# ----------------------------------------------------------------------
# OS specific
# ----------------------------------------------------------------------
# macOS
.DS_Store
.AppleDouble
.LSOverride
._*
.Spotlight-V100
.Trashes
Icon?

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msm
*.msp

# Linux
.directory
.Trash-*

# ----------------------------------------------------------------------
# Misc
# ----------------------------------------------------------------------
# Logs
*.log
logs/
log/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Temporary files
tmp/
temp/
.temp/
.tmp/

# Local configuration files
.env.local
.env.development.local
.env.test.local
.env.production.local
local.properties
config.local.json
settings.local.json

# ----------------------------------------------------------------------
# Rust specific - additional patterns
# ----------------------------------------------------------------------
# Rust documentation
/target/doc/
/doc/

# Rust benchmarks compiled output
/target/*/bench/
/benches/target/

# Cargo registry cache
.cargo/registry/
.cargo/git/

# Rust-Analyzer specific
rust-project.json
rust-analyzer.json
ra_*.json

# Allow Cargo config file to ensure reproducible builds
!.cargo/config.toml
!.cargo/config

# ----------------------------------------------------------------------
# Dependency management
# ----------------------------------------------------------------------
# Explicitly allow dependency lock files for reproducible builds
!Cargo.lock
!requirements.lock
!yarn.lock
!package-lock.json
!Pipfile.lock
!poetry.lock
!conanfile.py
!conanfile.txt

# ----------------------------------------------------------------------
# Keep important build files
# ----------------------------------------------------------------------
# Build scripts and configuration
!build.rs
!**/build.rs
!.rustfmt.toml
!rustfmt.toml
!clippy.toml
!.clippy.toml
!Cross.toml
!cross.toml

# Zig package management
!deps.zig

# C/C++ build configuration
!configure
!configure.ac
!configure.in
!config.h.in
!*.pc.in
!.clang-format
!.clang-tidy
